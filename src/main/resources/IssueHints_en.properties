ambiguous_custom_block_signature=Names for custom blocks are non-unique. Two custom blocks with the same name can only be distinguished if they have a different number or order of parameters. Try to always make the names for custom blocks unique.
ambiguous_parameter_name_unused=Scratch allows multiple parameter with the same name in one custom block. However, it cannot distinguish between these parameters afterwards, causing problems in your program. Always use parameters with unique names.
ambiguous_parameter_name_used=Scratch allows multiple parameter with the same name in one custom block. However, it cannot distinguish between these parameters afterwards, causing problems in your program. Always use parameters with unique names.
blocking_if_else=You are using 'stop all' or 'stop this script' blocks in both the 'if' and 'else' branch of this block. So the script terminates anyway and the blocks after the 'if else' are never executed. Try using the stop command only in one branch or remove the blocks after the 'if else'.
blocking_if_else_inside_loop=You are using 'stop all' or 'stop this script' blocks in both the 'if' and 'else' branch of this block. So the script terminates anyway and the loop outside the 'if else' is never correctly executed. Try using the stop command only in one branch or remove the loop.
busy_waiting_script=In your script you are constantly checking a condition, just to stop the script once the condition is met. Use the 'wait until' block instead of the forever and if combination to end your script when the condition is met.
busy_waiting_all=In your script you are constantly checking a condition, just to stop everything once the condition is met. Use the 'wait until' block instead of the forever and if combination to end your script when the condition is met.
busy_waiting_clone=In your script you are constantly checking a condition, just to delete the clone once the condition is met. Use the 'wait until' block instead of the forever and if combination to end your script when the condition is met.
call_without_definition=If you used a custom block in your program and deleted it, there may still be pieces of code referring to this custom block. Make sure to delete all instances, where the deleted custom block was used.
clone_type_1=There are identical statements in multiple scripts. A custom block could simplify your code.
clone_type_2=There are similar statements in multiple scripts, differing only in parameters. A custom block could simplify your code.
clone_type_3=There is similar code in multiple scripts. A custom block could simplify your code.
comparing_literals_default_true=You compared two texts. You are comparing two values that don't change at all while your program runs. Your pointed block will always return TRUE. Consequently, your code in the horizontal '%THENELSE' bracket is %ALWAYSNEVER executed. Therefore the block is obsolete.
comparing_literals_default_false=You compared two texts. You are comparing two values that don't change at all while your program runs. Your pointed block will always return FALSE. Consequently, your code in the horizontal '%THENELSE' bracket is %ALWAYSNEVER executed. Change the comparison to something meaningful or replace the structure.
comparing_literals_default_without_information=You compared two texts. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE. Change the comparison to something meaningful or replace the structure.
comparing_literals_default_variable=You used '%VARIABLE' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE, because of the order this words have in a dictionary. Consequently, your code in the horizontal '%THENELSE' bracket is %ALWAYSNEVER executed. Did you rather intend to use a variable '%VARIABLE'? If so, you should go to the variables toolbox and make a variable '%VARIABLE' first. Then try to use the new '%VARIABLE' block in your comparison.
comparing_literals_default_variable_exists=You used '%VARIABLE' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE, because of the order this words have in a dictionary. Consequently, your code in the horizontal '%THENELSE' bracket is %ALWAYSNEVER executed. Did you rather intend to use a block for your defined variable '%VARIABLE'?
comparing_literals_default_variable_two=You used '%VARIABLE1' and '%VARIABLE2' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE. Consequently, your code in horizontal brackets is %ALWAYSNEVER executed. Did you rather intend to use a variable '%VARIABLE1' or a variable '%VARIABLE2' or both? If so, you have to go to the variables toolbox and make a variable %VARIABLE1 or a variable %VARIABLE2 or both first. Then try to use the new %VARIABLE1 and/or %VARIABLE2 block in your comparison.
comparing_literals_default_variable_exists_two=You used '%VARIABLE1' and '%VARIABLE2' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE. Consequently, your code in horizontal brackets is %ALWAYSNEVER executed. Did you rather intend to use a variable '%VARIABLE1' or a variable '%VARIABLE2' or both? If so, you have to go to the variables toolbox and use the %VARIABLE1 and/or %VARIABLE2 block in your comparison.
comparing_literals_default_variable_two_without_information=You used '%VARIABLE1' and '%VARIABLE2' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE. Did you rather intend to use a variable '%VARIABLE1' or a variable '%VARIABLE2' or both? If so, you have to go to the variables toolbox and make a variable '%VARIABLE1' or a variable '%VARIABLE2' or both first. Then try to use the new '%VARIABLE1' and/or '%VARIABLE2' block in your comparison.
comparing_literals_default_variable_exists_two_without_information=You used '%VARIABLE1' and '%VARIABLE2' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE. Did you rather intend to use a variable '%VARIABLE1' or a variable '%VARIABLE2' or both? If so, you have to go to the variables toolbox and use the '%VARIABLE1' and/or '%VARIABLE2' block in your comparison.
comparing_literals_default_variable_without_information=You used '%VARIABLE' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE, because of the order this words have in a dictionary. Did you rather intend to use a variable '%VARIABLE'? If so, you should go to the variables toolbox and make a variable '%VARIABLE' first. Then try to use the new '%VARIABLE' block in your comparison.
comparing_literals_default_variable_exists_without_information=You used '%VARIABLE' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE, because of the order this words have in a dictionary. Did you rather intend to use a block for your defined variable '%VARIABLE'?
comparing_literals_wait_true=You compared two texts. You are comparing two values that don't change at all while your program runs. Your pointed block will always return TRUE. The blocks after the Wait will be executed %ALWAYSNEVER. Therefore the block is obsolete.
comparing_literals_wait_false=You compared two texts. You are comparing two values that don't change at all while your program runs. Your pointed block will always return FALSE. The blocks after the Wait will be executed %ALWAYSNEVER. Change the comparison to something meaningful or replace the structure.
comparing_literals_wait_variable=You used '%VARIABLE' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE, because of the order this words have in a dictionary. Consequently, the blocks after the Wait will be executed %ALWAYSNEVER. Did you rather intend to use a variable '%VARIABLE'? If so, you should go to the variables toolbox and make a variable '%VARIABLE' first. Then try to use the new '%VARIABLE' block in your comparison.
comparing_literals_wait_variable_exists=You used '%VARIABLE' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE, because of the order this words have in a dictionary. Consequently, the blocks after the Wait will be executed %ALWAYSNEVER. Did you rather intend to use a block for your defined variable '%VARIABLE'?
comparing_literals_wait_variable_two=You used '%VARIABLE1' and '%VARIABLE2' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE. Consequently, your code after the 'wait until' is %ALWAYSNEVER executed. Did you rather intend to use a variable '%VARIABLE1' or a variable '%VARIABLE2' or both? If so, you have to go to the variables toolbox and make a variable '%VARIABLE1' or a variable '%VARIABLE2' or both first. Then try to use the new '%VARIABLE1' and/or '%VARIABLE2' block in your comparison.
comparing_literals_wait_variable_exists_two=You used '%VARIABLE1' and '%VARIABLE2' just as text. You are comparing two values that don't change at all while your program runs. Your pointed block will always return %TRUEFALSE. Consequently, your code after the 'wait until' block is %ALWAYSNEVER executed. Did you rather intend to use a variable '%VARIABLE1' or a variable '%VARIABLE2' or both? If so, you have to go to the variables toolbox and use the '%VARIABLE1' and/or '%VARIABLE2' block in your comparison.
custom_block_with_forever=If a custom block contains a forever loop and the custom block is used in the middle of another script, the script will never be able to finish. The forever loop in the custom block cannot be left, resulting in the calling script never being able to proceed.
custom_block_with_termination=If a custom block contains a Stop all or Delete this clone and the custom block is called in the middle of another script, the script will never reach the blocks following the call.
dead_code=Your project contains blocks lying around. That means, there are blocks which will never be executed. This makes the project cluttered. You can delete these blocks.
duplicate_sprite=Your project contains multiple exact copies of the same sprite. This makes the project cluttered. Consider using cloning instead.
double_if=Your project contains a duplicated if-condition. This makes the project cluttered. Consider shortening the program by merging the two if-statements in a single conditional statement.
duplicated_script=Your project contains the identical script twice. You probably only need one of them, and could delete all copies.
empty_control_body=The horizontal brackets of the control structure are empty, so when the control block is invoked, nothing happens. This makes your code harder to understand. Consider deleting the block if you don't need it.
empty_custom_block=You created a custom block which contains no statements. When the custom block is invoked, nothing happens. Consider deleting the custom block if you don't need it.
empty_project=Your project is completely empty. Let's begin by adding the first sprite.
empty_script=You use an empty event block. When the event occurs, nothing will happen. Delete this block if nothing should happen. If not add blocks after this one.
empty_sprite=The sprite %SPRITE contains no blocks. It can not react to any user input or sprite interaction. If this is intended leave it as is. Otherwise you have to think what the sprite should do and introduce scripts to this sprite.
endless_recursion_broadcast=If a custom block calls itself inside its body and has no condition to stop the recursion, it will run for an indefinite amount of time.
endless_recursion_procedure=If a message is sent in the same script it was received and the script has no condition to stop the recursion, it will run for an indefinite amount of time.
expression_as_touching_or_color=This block expects a colour or a sprite as parameter and does not work correctly with a string or a number. You probably should remove the reporter block.
forever_inside_loop=If two loops are nested and the inner loop is a forever loop, the inner loop will never terminate. Thus the statements outside the inner forever loop are only executed once. Maybe you can omit it.
illegal_parameter_refactor=The parameter has the wrong type. By editing the custom block the boolean parameter was made into a number or text parameter. To fix this undo the editing.
immediate_delete_clone_after_broadcast=The script deletes the clone immediately after the 'broadcast' block. The script that handles the message for this clone won't be executed right. It is better to use a 'broadcast and wait' block instead.
immediate_stop_after_say_think=The script stops everything immediately after the '%SAYTHINK' block. The text is never shown. Replace the '%SAYTHINK' block with a '%SAYTHINK for seconds' block.
inappropriate_handler_delete_clone=The script contains a 'delete this clone' block. It can't be executed, because in the event handler it isn't clear which clone should be affected. The script has to start with a 'when I start as a clone' or 'when this sprite clicked' block. Another possibility would be moving the 'delete this clone' block to a script starting with one of these blocks.
interrupted_loop_sensing=The '%BLOCKNAME' block interrupts the checking of the condition in the '%IFTHEN' block while being executed. It can happen that the condition occurs but your script doesn't react accordingly because it is busy doing the '%BLOCKNAME' block. Consider doing the condition checking in a separate (parallel) script.
long_script=The script you created is very long. Please divide it into two or more smaller scripts: each smaller script should be responsible for one subtask to keep track of it.
loop_one=If you set the number of repetitions in a loop to 1 it is executed once. You could just as well just remove the loop block, and simply connect the blocks inside the horizontal bracket directly into your script.
loop_zero=If you set the number of repetitions in a loop to 0 it is never executed. You could just as well just remove the loop block and the blocks in the its horizontal bracket.
message_never_received=The message '%MESSAGE' sent by this broadcast is never received by any 'When I receive' hat block. So nothing will happen in reaction to the message. When a script sends a message, you have to take care, that another script receives it.
message_never_sent=The message '%MESSAGE' this block should receive is never sent. This script will never be triggered. When a script waits for a message to receive, you have to take care, that another script sends it.
message_never_sent_say_think=The message '%MESSAGE' this block should receive is never sent. This script will never be triggered. You are using the message as text in a '%SAYTHINK (for seconds)' block in the sprite(s): %SPRITES. When a script waits for a message to receive, you have to take care, that you send it with a 'broadcast %MESSAGE' block.
message_never_sent_touching=The message '%MESSAGE' this block should receive is never sent. This script will never be triggered. You are using a 'touching %SPRITE?' block in: %SPRITES. When a message about a touching event should be sent to all sprites you have to use an additional 'broadcast %MESSAGE' block.
middle_man_broadcast=Using a broadcast receiver only to send a broadcast again is considered a code smell, as the script is a middle man between the original sender and the final receiver. Consider to change the message of the final receiver to the message sent of the first broadcast and then delete the middle man to save redundant code.
middle_man_procedure=Using a custom block only to call another custom block is considered a code smell, as the first custom block is a middle man between the original caller and the final custom block. Consider to change the call of the first custom block to a call of the final custom block and then delete the middle man to save redundant code.
missing_ask=Your project uses the 'answer' block, but the 'ask' block is never used in the project. The 'answer' block can not return a meaningful value. Use the 'ask' block before the first instance of 'answer'.
missing_backdrop_switch=If the 'When backdrop switches to' block is used to start a script and the backdrop never switches to the selected one, the script is never executed. Make sure to change the backdrop in your project.
missing_clone_call=If the 'When I start as a clone' block is used to start a script, but the sprite is never cloned, the event will never be triggered and the script will not be executed. Make sure to use a clone block for this sprite.
missing_clone_initialization=When a sprite is cloned but it has no scripts started by 'When I start as a clone' or 'When this sprite clicked' events, clones will not perform any actions. Maybe you want to use one of those event handlers in your project. Otherwise you could use the 'stamp' block in the pen extension if the clone should only be visible.
missing_clone_initialization_delete_clone=When a sprite is cloned but it has no scripts started by 'When I start as a clone' or 'When this sprite clicked' events, clones will not perform any actions. Maybe you want to use one of those event handlers in your project. You are using a 'delete this clone' block in a script of %SPRITE. Consider starting that script with a 'When I start as a clone' or 'When this sprite clicked' block.
missing_clone_initialization_delete_clone_message=When a sprite is cloned but it has no scripts started by 'When I start as a clone' or 'When this sprite clicked' events, clones will not perform any actions. Maybe you want to use one of those event handlers in your project. You are using a 'delete this clone' block in a script of %SPRITE that starts with message '%MESSAGE'. Search the sprite %SPRITE for the script sending the message '%MESSAGE'. Consider starting that script with a 'When I start as a clone' or 'When this sprite clicked' block instead of the '%EVENTHANDLER' block.
missing_clone_initialization_delete_clone_message_multiple=When a sprite is cloned but it has no scripts started by 'When I start as a clone' or 'When this sprite clicked' events, clones will not perform any actions. Maybe you want to use one of those event handlers in your project. You are using a 'delete this clone' block in a script of %SPRITE that starts with message '%MESSAGE'. Search the sprite %SPRITE for the scripts sending the message '%MESSAGE'. Consider starting that scripts with a 'When I start as a clone' or 'When this sprite clicked' block instead of the '%EVENTHANDLER' blocks.
missing_erase_all=If a sprite uses a pen down block but never an erase all block, then all drawings from a previous execution remain for the next run too. Maybe you should use an 'Erase all' block after your hat block.
missing_initialization=In this sprite, %VARIABLE is not initalized before it is used the first time. It will use whatever value it contained at the end of the last run. Initialize the %VARIABLE by assigning the desired initial value at the beginning of a suitable script.
missing_loop_sensing=Your script should execute actions when an event occurs. You have to check for this event continuously inside a loop for not missing the event.
missing_loop_sensing_variable=Your script should execute actions when the variable has a specific value. You have to check for this event continuously inside a loop for not missing the event.
missing_pen_down=You use the 'pen down' block but you never lift the pen again, so your sprite will draw forever. Make sure to use a 'pen up' block in the sprite.
missing_pen_up=You use the 'pen up' block but your sprite has never set the pen down before. Make sure to use a 'pen down' block if you want to draw something.
missing_resource=Your program is missing the sound or picture you're trying to use. Select another sound ot image or add the one you intend to use.
missing_termination=The repeat until blocks require a stopping condition. If the condition is missing, the result is an infinite loop. This will then prevent the execution of blocks following the loop in the script.
missing_wait_condition=The wait until blocks require a condition. If the condition is missing, the block will wait forever and the following code is never executed.
multiple_attribute_modifications=There are multiple changes to the same variable or attribute in sequence, which could be replaced by a single statement.
nested_loops=If two or more loops are nested, there often occur some unpredictable problems.
no_working_scripts=Your sprite only has loose hat blocks and other blocks lying around. Make sure to connect the hat blocks to the other blocks so that the sprite can react to the events.
orphaned_parameter=If you delete a created parameter again, be sure to remove it from all the locations, where you used it before.
parameter_out_of_scope=Make sure, that you use the parameters of a custom block only inside of this block.
position_equals_check=A sprite's position is usually defined by its center. It is unlikely that the %COORDINATE coordinate of an object has the exact value of the comparison. Instead try to use an approximation with '<' or '>'.
position_equals_check_dist=A sprite's position is usually defined by its center. It is unlikely that the distance between two objects has the exact value of the comparison. Instead try to use an approximation with '<' or '>'.
position_equals_check_zero_sprites=The distance between two sprites is usually measured from center to center. It is very unlikely that the centers of two sprites will ever be exactly on top of each other. Remove the '=' and instead use a suitable approximation with '<' or use a pointed block 'touching ...?' from the sensing toolbox.
position_equals_check_zero_mouse=The distance between a sprite and the mouse-pointer is usually measured from center to center. It is unlikely that the center points of mouse-pointer and sprite will ever be exactly on top of each other. Instead remove the '=' block and try to use a suitable approximation with '<' or use a pointed block 'touching ...?' block from the sensing toolbox.
recursive_cloning=Scripts starting with 'When I start as a clone' should not create clones of itself. This could result in an infinite number of clones.
same_variable_different_sprite=The same variable name is used in multiple sprites. This can be confusing. Make sure, that you use unique names for your variables.
sequential_actions=Your script contains a sequence of repeated similar statements, which could be shortened by using a loop.
sprite_naming=The sprite %SPRITE doesn't have a meaningful name. You use the default name or one that is already used followed by a number. This makes your program hard to understand. Give your sprite a meaningful, unique name.
stuttering_movement=When you use the 'When key pressed' event for movement, this could result in stuttering movement. In this case, it is better to use a 'forever' loop combined with an 'if 'key %KEY pressed?' then' that handles the key press events.
terminated_loop=The loop is terminated before it actually repeats (e.g. by a stop-block).
type_error=Some of the comparisons compare attributes of different types.
type_error_weird_distance=You are using a block inside 'distance to' to which you can not measure distance. Use the mouse-pointer or sprite name options given to you by the 'distance to' block.
unused_custom_block=You created a custom block but you never use it in your project. This makes the project cluttered. Delete the custom block.
unused_parameter=You created a parameter but you never use it in your procedure. This makes the custom block harder to understand. Delete the parameter.
unused_variables=You created a variable but you never use it in your project. This makes the project harder to understand. Delete the variable.
variable_as_literal=You are using the name of a variable as text. Did you mean to use the variable block for '%VARIABLE' instead?
variable_initialization_race=A variable is initialized in different scripts triggered by the same event. The result may change depending on the order in which the scripts are executed. Try assigning the values in only one of the scripts.
