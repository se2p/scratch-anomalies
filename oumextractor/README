TABLE OF CONTENTS
=================
I. What is OUMExtractor?
II. How to use OUMExtractor?
III. Other notes.


I. What is OUMExtractor?
========================
OUMExtractor is a tool for creating object usage models out of Java bytecode.
This is the first step required for both JADET and Tikanga, and both use the
models generated by OUMExtractor.


II. How to use OUMExtractor?
============================
OUMExtractor can be used by invoking its main script: oumextractor. The main functionality available is: analyzing a jar file, analyzing a directory with jar files, analyzing directories with .class files, outputting object usage models.

1) Analyzing a jar file.
The syntax here is as follows:
    ./oumextractor -create [-libs JARS] [-libdirs DIRS] JAR_FILE MODELS_DIR
The "-create" switch is mandatory and informs the script about the task to be
done (i.e., analyzing a jar file).
The "-libs" switch allows you to provide a list of jar files (separated with
colons, as in "lib1.jar:lib2.jar") that OUMExtractor will take into account
while analyzing your project (see section III for details on what this means
and how important this is).
The "-libdirs" switch allows you to provide a list of directories (separated
with colons, as in "dir1:dir2"). OUMExtractor will take into account all jar
files in those directories while analyzing your project (see section III for
details on what this means and how important this is).
The JAR_FILE value is the jar file to extract object usage models from.
The MODELS_DIR value is the directory, to which OUMExtractor should output
object usage models.

2) Analyzing a directory with jar files
The syntax here is as follows:
    ./oumextractor -createdir [-libs JARS] [-libdirs DIRS] JARS_DIR
    MODELS_DIR
The "-createdir" switch is mandatory and informs the script about the task to
be done (i.e., analyzing a directory with jar files).
The "-libs" and "-libdirs" switches, as well as the MODELS_DIR value have the
same meaning as when analyzing a jar file (see above).
The JARS_DIR value is the directory with jar files to extract object usage
models from. Subdirectories of JARS_DIR are ignored (i.e., jar files in
subdirectories of JARS_DIR are not analyzed).

3) Analyzing directories with .class files
The syntax here is as follows:
    ./oumextractor -createfiles [-libs JARS] [-libdirs DIRS] CLASS_FILES
    MODELS_DIR
The "-createfiles" switch is mandatory and informs the script about the task
to be done (i.e., analyzing directories with .class files).
The "-libs" and "-libdirs" switches, as well as the MODELS_DIR value have the
same meaning as when analyzing a jar file (see above).
The CLASS_FILES value is a list of directories (separated with colons, as in
"dir1:dir2"). OUMExtractor will analyze all .class files from those
directories (including .class files in their subdirectories, etc.; this allows
you to specify the root directory of a compiled project and get the whole
project analyzed).

4) Outputting object usage models
The syntax here is as follows:
    ./oumextractor -output .SER_FILES_DIR OUTPUT_DIR [MODELS_FILE]
The "-output" switch is mandatory and informs the script about the task to be
done (i.e., outputting object usage models).
The .SER_FILES_DIR value is the directory with object usage models.
The OUTPUT_DIR value is the directory, to which the ".dot" representations of
the object usage models are to be outputted.
The MODELS_FILE value is optional. If it is not present, all object usage
models get outputted. If it is present, it is the name of the file with ids of
object usage models to output (the file consists of lines, and each line
contains exactly one number---the id). For information on how to get those
ids, see section III.


III. Other notes.
=================
When analyzing a project with no libraries specified (no "-libs" and no
"-libdirs" switch given), OUMExtractor's analysis accuracy may suffer in some
cases. Imagine that the project calls a function foo(), defined in some
external library, which is not part of the project. OUMExtractor has no way to
know about any exceptions thrown about foo(), so it assumes that it does not
throw any. This might be untrue, and by providing OUMExtractor with
information about the library (i.e., giving it the library's jar(s) file(s) in
the "-libs" or "-libdirs" switch) analysis accuracy can be improved.

OUMExtractor essentially tries to ignore all errors that happen along the way
and proceed anyway. But in rare cases it can happen that you get an
InternalError exception with information saying "This should not happen".
OUMExtractor is right here: this should not happen. This message in almost all
cases means that OUMExtractor has found in the jar files it got (i.e., the
project + the libraries) more than one definition of the same method, and they
differ. This leads to OUMExtractor not knowing which is the right one and
sometimes manifests itself in OUMExtractor choosing the wrong one and causing
this exception to be thrown. If this happens, do not provide libraries (this
decreases accuracy, but is not that severe; see above). If this does not help,
the project itself is inconsistent. You have two choices then: find and
eliminate duplicate definitions by hand, or look into OUMExtractor's source
code and modify it so that it does not care about the problem (hint: look near
the line that threw the InternalError exception).

Object usage models are outputted into the given directory. In addition to
object usage models and some binary summary file, the directory will contain a
text file called "index.txt". This file contains a list of all object usage
models mined. For each model you get its id, the statically identifiable
object it represents, the method that uses the object, and the class that
defines the method.
