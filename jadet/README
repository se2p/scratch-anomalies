TABLE OF CONTENTS
=================
I. What is JADET?
II. How to use JADET?


I. What is JADET?
=================
JADET is a Java Anomaly DETector. It can find API usage patterns and their
violations.


II. How to use JADET?
=====================
JADET can be used by invoking its main script: jadet. The main functionality available is: outputting API usage patterns, outputting API
usage patterns violations, outputting API usage patterns visualizations,
and viewing and classifying violations.

1) Outputting API usage patterns
The syntax here is as follows:
    ./jadet -output-patterns (-models-dir MODELS_DIR | -input-name INPUT_NAME)
    [-xml] [-short] [-very-short] MIN_SUPPORT MIN_SIZE OUT_FILE
The "-output-patterns" switch is mandatory and informs the script about the
task to be done (i.e., outputting API usage patterns).
One and only one of the "-models-dir" and "-input-name" switches must appear
in the command line. The argument to "-models-dir" is the directory with
object usage models extracted from the project(s), for which we want to find
API usage patterns. These models can be created using the OUMExtractor tool.
The argument to "-input-name" is the core name of the output of the
lightweight parser (the lightweight parser, when analyzing a project, outputs
three files with the same core CORE: CORE.matrix, CORE.funcs, and CORE.scs).
So by choosing the appropriate switch you can control where the input data
comes from: from object usage models (the traditional method) or from the
lightweight parser (much less accurate, but thanks to this JADET can handle C,
Java, C++, PHP, etc.)
The "-xml" switch, if used, will make the output be in the XML format.
Otherwise the output is in a human-readable format (no, XML is not
human-readable: output being a text does not mean it is human-readable).
The "-short" and "-very-short" switches are mutually exclusive, and at most
one of them can be used. Normally the human-readable output gives as many
details about events (such as method calls) as possible. If the "-short"
switch is used, packages' names are removed from methods' signatures. If the
"-very-short" switch is used, packages' names are completely removed. Of
course these switches have no effect when outputting the patterns in the XML
format.
The "MIN_SUPPORT" value is the minimum support value to use.
The "MIN_SIZE" value is the minimum size value (i.e., minimum number of
properties in a pattern for it to be considered one) to use.
The "OUT_FILE" is the name of the file to which the patterns should be
outputted.

2) Outputting API usage patterns violations
The syntax here is as follows:
    ./jadet -output-violations-xml
    (-models-dir MODELS_DIR | -input-name INPUT_NAME)
    MIN_SUPPORT MIN_SIZE MAX_DEV_LEVEL MIN_CONFIDENCE OUT_FILE
The "-output-violations-xml" switch is mandatory and informs the script about
the task to be done (i.e., outputting API usage patterns violations).
The "-models-dir" and "-input-name" switches, as well as "MIN_SUPPORT" and
"MIN_SIZE" values are used just like when outputting API usage patterns (see
above).
The "MAX_DEV_LEVEL" is the maximum deviation level to use. The maximum
deviation level is the maximum number of sequential constraints that can be
different between the pattern and its violation for the violation to be
considered as one. Hint: use 10000. Always :-)
The "MIN_CONFIDENCE" is the minimum confidence value to use.
The "OUT_FILE" is the file, to which the violations (in the XML format) should
be outputted.

3) Outputting API usage patterns visualizations
The syntax here is as follows:
    ./jadet -visualize-pattern [-thesis] DOT_FILE PATTERN_FILE
    (to output a visualization of a given pattern)
The "-visualize-pattern" switch is mandatory and informs the script about the
task to be done (i.e., visualizing a pattern).
The "-thesis" switch is optional, and---if used---will make the visualization
not contain signatures in method calls.
The "DOT_FILE" is the name of the file, to which the ".dot" visualization of
the pattern should be outputted.
The "PATTERN_FILE" is the name of the file with the pattern to visualize. This
file consists of a list of sequential constraints, as outputted by JADET in a
human-readable format.

4) Viewing and classifying violations
The syntax here is as follows:
    ./jadet -edit-violations-xml VIOLATIONS_FILE
The "-edit-violations-xml" switch is mandatory and informs the script about
the task to be done (i.e., viewing and classifying violations).
The "VIOLATIONS_FILE" is the file with the violations (generated by JADET).
This command will open a GUI that will allow you to see all violations,
visualize them, and classify them as defects, code smells, hints, and false
positives, add comments to them, and mark violations as duplicates of other
violations. All this information is automatically saved in the VIOLATIONS_FILE
when the GUI exits.
